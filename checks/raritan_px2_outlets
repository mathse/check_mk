#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
#
# author: github@mathiasdecker.de

def parse_raritan_px2_outlets(info):
    map_state = {
        "-1": (3, "unavailable" ),
        "0": (1, "open" ),
        "1": (1, "closed" ),
        "2": (1, "belowLowerCritical" ),
        "3": (1, "belowLowerWarning" ),
        "4": (0, "normal" ),
        "5": (2, "aboveUpperWarning" ),
        "6": (2, "aboveUpperCritical" ),
        "7": (0, "on" ),
        "8": (2, "off" ),
        "9": (0, "detected" ),
        "10": (2, "notDetected" ),
        "11": (2, "alarmed" ),
        "12": (0, "ok" ),
        "13": (1, "marginal" ),
        "14": (2, "fail" ),
        "15": (1, "yes" ),
        "16": (1, "no" ),
        "17": (1, "standby" ),
        "18": (1, "one" ),
        "19": (1, "two" ),
        "20": (1, "inSync" ),
        "21": (2, "outOfSync" ),
        "0": (3, "NULL")
    }
    parsed = {}
    for index, state in info:
        parsed[index[2:]] = {
            "state"   : map_state.get(state, (3, "unknown")),
        }

    return parsed


def inventory_raritan_px2_outlets(info):
    return [ ("%s" % x , None) for x in info ]

def check_raritan_px2_outlets(item, params, parsed):
    if item in parsed:
        state, state_readable = parsed[item]["state"]
        # port 24 is default of (RAS-System)
        if item == '24':
            if state == 2:
                state = 0
                state_readable = "%s - Outlet will only turn 'on' in the shutdown sequence" % state_readable
            else:
                state = 2
                state_readable = "%s - Outlet is in shutdown mode" % state_readable

        if item == '23':
            state_readable = "%s - RAS-Port (will always be 'on')" % state_readable
        yield state, "Operational status: %s" % state_readable
        for result in check_elphase(item, params, parsed):
            yield result


check_info['raritan_px2_outlets'] = {
    'parse_function'            : parse_raritan_px2_outlets,
    'inventory_function'        : inventory_raritan_px2_outlets,
    'check_function'            : check_raritan_px2_outlets,
    'service_description'       : 'Outlet %s',
    'has_perfdata'              : True,
    'snmp_info'                 : (".1.3.6.1.4.1.13742.6.4.1.2.1", [
                                        OID_END, # outletIndex
                                        "3",    # outletOperationalState
                                  ]),
    'snmp_scan_function'        : lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.13742.6",
    'includes'                  : [ "elphase.include" ],
    'group'                     : "el_inphase",
}
