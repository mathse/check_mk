#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
#
# author: github@mathiasdecker.de

wagner_titanus_racksense_info = [(".1.3.6.1.2.1.1",               [1,          # sysDescr            0
                                                                  3,          # sysUpTimeInstance   1
                                                                  4,          # sysContact          2
                                                                  5,          # sysName             3
                                                                  6]),        # sysLocation         4
                                # racksens
                                (".1.3.6.1.4.1.34187.57949.1.1", [1,          # company             0
                                                                  2,          # model               1
                                                                  3,          # revision            2
                                                                  1000,       # pswMainAlarmD1      3
                                                                  1001,       # pswPreAlarmD1       4
                                                                  1002,       # pswInfAlarmD1       5
                                                                  1003,       # pswMainAlarmD2      6
                                                                  1004,       # pswPreAlarmD2       7
                                                                  1005,       # pswInfAlarmD2       8
                                                                  1006]),     # pswFailureDisplayOn 9
                                                                              # off(0), on(1)
                                (".1.3.6.1.4.1.34187.57949.2.1", [
                                                                  24593,   # rsBargraphLevel1 .1.3.6.1.4.1.34187.57949.2.1.24593
                                                                  24598,   # rsBargraphLevel2 .1.3.6.1.4.1.34187.57949.2.1.24598
                                                                  24595,   # rsChamberState1 .1.3.6.1.4.1.34187.57949.2.1.24595
                                                                  24600,   # rsChamberState2 .1.3.6.1.4.1.34187.57949.2.1.24600
                                                                  24587,   # rsAirFlowdeviation .1.3.6.1.4.1.34187.57949.2.1.24587
                                                                  246070000,   # tsD2AirFlowDeviationString #tbr
                                                                  245850000,   # rsAirTemperatureString
                                                                  246080000, # tsD2AirTemperatureString #tbr
                                                                  24576014, # rsDoorState
                                                                  24590018, # rsBuzzerState
                                                                  24576013, # rsServiceOrBlocked

                                                                  ]),
                  ]

def wagner_titanus_racksense_scan(oid):
    return oid(".1.3.6.1.2.1.1.2.0") in [".1.3.6.1.4.1.34187.57949"]


def parse_wagner_titanus_topsens(info):
    # not much of a parse function. simply retrieves the info blocks that apply for the
    # respective topsens model and returns only those
    res = [info[0],
            info[1] or info[3],
            info[2] or info[4]]
    return res


#   .--titanus info--------------------------------------------------------.
#   |         _   _ _                          _        __                 |
#   |        | |_(_) |_ __ _ _ __  _   _ ___  (_)_ __  / _| ___            |
#   |        | __| | __/ _` | '_ \| | | / __| | | '_ \| |_ / _ \           |
#   |        | |_| | || (_| | | | | |_| \__ \ | | | | |  _| (_) |          |
#   |         \__|_|\__\__,_|_| |_|\__,_|___/ |_|_| |_|_|  \___/           |
#   |                                                                      |
#   '----------------------------------------------------------------------'

def inventory_wagner_titanus_racksense_info(info):
    return [ (None, None) ]

def check_wagner_titanus_racksense_info(item, _no_params, info):
    parsed = parse_wagner_titanus_topsens(info)
    message  = "System: " + parsed[0][0][0]
    message += ", Uptime: " + get_age_human_readable(int(parsed[0][0][1]) / 100)
    message += ", System Name: " + parsed[0][0][3]
    message += ", System Contact: " + parsed[0][0][2]
    message += ", System Location: " + parsed[0][0][4]
    message += ", Company: " + parsed[1][0][0]
    message += ", Model: " + parsed[1][0][1]
    message += ", Revision: " + parsed[1][0][2]
    if len(info) > 8:
        ts_lsn_bus = parsed[2][0][8]
        if ts_lsn_bus == "0":
            ts_lsn_bus = "offline"
        elif ts_lsn_bus == "1":
            ts_lsn_bus = "online"
        else:
            ts_lsn_bus = "unknown"

        message += ", LSNi bus: " + ts_lsn_bus
    return 0, message

check_info["wagner_titanus_racksense.info"] = {
    "check_function"        : check_wagner_titanus_racksense_info,
    "inventory_function"    : inventory_wagner_titanus_racksense_info,
    "service_description"   : "Topsense Info",
    "snmp_info"             : wagner_titanus_racksense_info,
    "snmp_scan_function"    : wagner_titanus_racksense_scan
}

#.
#   .--overall status------------------------------------------------------.
#   |                               _ _       _        _                   |
#   |       _____   _____ _ __ __ _| | |  ___| |_ __ _| |_ _   _ ___       |
#   |      / _ \ \ / / _ \ '__/ _` | | | / __| __/ _` | __| | | / __|      |
#   |     | (_) \ V /  __/ | | (_| | | | \__ \ || (_| | |_| |_| \__ \      |
#   |      \___/ \_/ \___|_|  \__,_|_|_| |___/\__\__,_|\__|\__,_|___/      |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def inventory_wagner_titanus_racksense_overall_status(info):
    return [ (None, None) ]

def check_wagner_titanus_racksense_overall_status(item, _no_params, info):
    parsed = parse_wagner_titanus_topsens(info)
    psw_failure = parsed[1][0][9]
    status = 3
    if psw_failure == "0":
        message = "Overall Status reports OK"
        status = 0
    else:
        message = "Overall Status reports a problem"
        status = 2
    return status, message

check_info["wagner_titanus_racksense.overall_status"] = {
    "check_function"        : check_wagner_titanus_racksense_overall_status,
    "inventory_function"    : inventory_wagner_titanus_racksense_overall_status,
    "service_description"   : "Overall Status",
    "snmp_info"             : wagner_titanus_racksense_info,
    "snmp_scan_function"    : wagner_titanus_racksense_scan
}

#.
#   .--alarm---------------------------------------------------------------.
#   |                          _                                           |
#   |                     __ _| | __ _ _ __ _ __ ___                       |
#   |                    / _` | |/ _` | '__| '_ ` _ \                      |
#   |                   | (_| | | (_| | |  | | | | | |                     |
#   |                    \__,_|_|\__,_|_|  |_| |_| |_|                     |
#   |                                                                      |
#   '----------------------------------------------------------------------'

def inventory_wagner_titanus_racksense_alarm(info):
    return [ ("1", None), ("2", None) ]

def check_wagner_titanus_racksense_alarm(item, _no_params, info):
    parsed = parse_wagner_titanus_topsens(info)
    if item == "1":
        main_alarm = parsed[1][0][3]
        pre_alarm  = parsed[1][0][4]
        info_alarm = parsed[1][0][5]
    elif item == "2":
        main_alarm = parsed[1][0][6]
        pre_alarm  = parsed[1][0][7]
        info_alarm = parsed[1][0][8]
    else:
        return 3, "Alarm Detector %s not found in SNMP" % item

    status = 0
    message = "No Alarm"
    if info_alarm != "0":
        message = "Info Alarm"
        status = 1
    if pre_alarm != "0":
        message = "Pre Alarm"
        status = 1
    if main_alarm != "0":
        message = "Main Alarm: Fire"
        status = 2

    return status, message

check_info["wagner_titanus_racksense.alarm"] = {
    "check_function"        : check_wagner_titanus_racksense_alarm,
    "inventory_function"    : inventory_wagner_titanus_racksense_alarm,
    "service_description"   : "Alarm Detector %s",
    "snmp_info"             : wagner_titanus_racksense_info,
    "snmp_scan_function"    : wagner_titanus_racksense_scan
}

#.
#   .--smoke percent-------------------------------------------------------.
#   |                      _                                        _      |
#   |  ___ _ __ ___   ___ | | _____   _ __   ___ _ __ ___ ___ _ __ | |_    |
#   | / __| '_ ` _ \ / _ \| |/ / _ \ | '_ \ / _ \ '__/ __/ _ \ '_ \| __|   |
#   | \__ \ | | | | | (_) |   <  __/ | |_) |  __/ | | (_|  __/ | | | |_    |
#   | |___/_| |_| |_|\___/|_|\_\___| | .__/ \___|_|  \___\___|_| |_|\__|   |
#   |                                |_|                                   |
#   '----------------------------------------------------------------------'

def inventory_wagner_titanus_racksense_smoke(info):
    return [ ("1", None), ("2", None) ]

def check_wagner_titanus_racksense_smoke(item, _no_params, info):
    parsed = parse_wagner_titanus_topsens(info)
    if item == "1":
        smoke_perc = float(parsed[2][0][0])
    elif item == "2":
        smoke_perc = float(parsed[2][0][1])
    else:
        return 3, "Smoke Detector %s not found in SNMP" % item

    perfdata = [("smoke_perc", smoke_perc)]
    if smoke_perc > 5:
        status = 2
    elif smoke_perc > 3:
        status = 1
    else:
        status = 0

    return status, "%0.6f%% smoke detected" % smoke_perc, perfdata

check_info["wagner_titanus_racksense.smoke"] = {
    "check_function"        : check_wagner_titanus_racksense_smoke,
    "inventory_function"    : inventory_wagner_titanus_racksense_smoke,
    "service_description"   : "Smoke Detector %s",
    "has_perfdata"          : True,
    "snmp_info"             : wagner_titanus_racksense_info,
    "snmp_scan_function"    : wagner_titanus_racksense_scan
}

#.
#   .--chamber deviation---------------------------------------------------.
#   |         _                     _                     _                |
#   |     ___| |__   __ _ _ __ ___ | |__   ___ _ __    __| | _____   __    |
#   |    / __| '_ \ / _` | '_ ` _ \| '_ \ / _ \ '__|  / _` |/ _ \ \ / /    |
#   |   | (__| | | | (_| | | | | | | |_) |  __/ |    | (_| |  __/\ V /     |
#   |    \___|_| |_|\__,_|_| |_| |_|_.__/ \___|_|     \__,_|\___| \_/      |
#   |                                                                      |
#   '----------------------------------------------------------------------'

def inventory_wagner_titanus_racksense_chamber_deviation(info):
    return [ ("1", None), ("2", None) ]

def check_wagner_titanus_racksense_chamber_deviation(item, _no_params, info):
    parsed = parse_wagner_titanus_topsens(info)
    if item == "1":
        chamber_deviation = float(parsed[2][0][2])
    elif item == "2":
        chamber_deviation = float(parsed[2][0][3])
    else:
        return 3, "Chamber Deviation Detector %s not found in SNMP" % item

    perfdata = [("chamber_deviation", chamber_deviation)]

    return 0, "%0.6f%% Chamber Deviation" % chamber_deviation, perfdata

check_info["wagner_titanus_racksense.chamber_deviation"] = {
    "check_function"        : check_wagner_titanus_racksense_chamber_deviation,
    "inventory_function"    : inventory_wagner_titanus_racksense_chamber_deviation,
    "service_description"   : "Chamber Deviation Detector %s",
    "has_perfdata"          : True,
    "snmp_info"             : wagner_titanus_racksense_info,
    "snmp_scan_function"    : wagner_titanus_racksense_scan
}

#.
#   .--air flow deviation--------------------------------------------------.
#   |              _         __ _                     _                    |
#   |         __ _(_)_ __   / _| | _____      __   __| | _____   __        |
#   |        / _` | | '__| | |_| |/ _ \ \ /\ / /  / _` |/ _ \ \ / /        |
#   |       | (_| | | |    |  _| | (_) \ V  V /  | (_| |  __/\ V /         |
#   |        \__,_|_|_|    |_| |_|\___/ \_/\_/    \__,_|\___| \_/          |
#   |                                                                      |
#   '----------------------------------------------------------------------'

wagner_titanus_racksense_airflow_deviation_default_values = (-20.0, -20.0, 20.0, 20.0)

def inventory_wagner_titanus_racksense_airflow_deviation(info):
    return [ ("1", "wagner_titanus_racksense_airflow_deviation_default_values") ]

def check_wagner_titanus_racksense_airflow_deviation(item, params, info):
    parsed = parse_wagner_titanus_topsens(info)
    lower_crit, lower_warn, upper_warn, upper_crit = params
    status=0
    if item == "1":
        airflow_deviation = float(parsed[2][0][4])
    elif item == "2":
        airflow_deviation = float(parsed[2][0][5])
    else:
        return 3, "Airflow Deviation Detector %s not found in SNMP" % item

    if airflow_deviation >= upper_warn or airflow_deviation <= lower_warn:
        status = 1
    if airflow_deviation >= upper_crit or airflow_deviation <= lower_crit:
        status = 2

    perfdata = [("airflow_deviation", airflow_deviation, upper_warn, upper_crit, 0)]

    return status, "Airflow Deviation is %0.6f%%" % airflow_deviation, perfdata

check_info["wagner_titanus_racksense.airflow_deviation"] = {
    "check_function"        : check_wagner_titanus_racksense_airflow_deviation,
    "inventory_function"    : inventory_wagner_titanus_racksense_airflow_deviation,
    "service_description"   : "Airflow Deviation Detector %s",
    "has_perfdata"          : True,
    "group"                 : "airflow_deviation",
    "snmp_info"             : wagner_titanus_racksense_info,
    "snmp_scan_function"    : wagner_titanus_racksense_scan
}

#.
#   .--air temp------------------------------------------------------------.
#   |                     _        _                                       |
#   |                __ _(_)_ __  | |_ ___ _ __ ___  _ __                  |
#   |               / _` | | '__| | __/ _ \ '_ ` _ \| '_ \                 |
#   |              | (_| | | |    | ||  __/ | | | | | |_) |                |
#   |               \__,_|_|_|     \__\___|_| |_| |_| .__/                 |
#   |                                               |_|                    |
#   '----------------------------------------------------------------------'

factory_settings["wagner_titanus_racksense_temperature_default_values"] = {
    "levels"    : (30, 35),
}

def inventory_wagner_titanus_racksense_temp(info):
    return [ ("Ambient 1", {}) ]

def check_wagner_titanus_racksense_temp(item, params, info):
    parsed = parse_wagner_titanus_topsens(info)
    if not item.startswith("Ambient"):
        item = "Ambient %s" % item
    # print parsed[2][0][6]
    # print len(info[2][0][6])
    # import struct
    # print struct.unpack("!f",info[2][0][6].decode('hex'))
    if item == "Ambient 1":
        temp = float(parsed[2][0][6])
    # elif item == "Ambient 2":
    #     temp = float(parsed[2][0][7])
    else:
        return
    # print temp
    # temp = 1
    return check_temperature(temp, params, "wagner_titanus_racksense_%s" % item)

check_info["wagner_titanus_racksense.temp"] = {
    "check_function"         : check_wagner_titanus_racksense_temp,
    "default_levels_variable": "wagner_titanus_racksense_temperature_default_values",
    "inventory_function"     : inventory_wagner_titanus_racksense_temp,
    "service_description"    : "Temperature %s",
    "has_perfdata"           : True,
    "group"                  : "temperature",
    "snmp_info"              : wagner_titanus_racksense_info,
    "snmp_scan_function"     : wagner_titanus_racksense_scan,
    "includes"               : [ "temperature.include" ],
}

#.
#   .--door status------------------------------------------------------.
#   |                               _ _       _        _                   |
#   |       _____   _____ _ __ __ _| | |  ___| |_ __ _| |_ _   _ ___       |
#   |      / _ \ \ / / _ \ '__/ _` | | | / __| __/ _` | __| | | / __|      |
#   |     | (_) \ V /  __/ | | (_| | | | \__ \ || (_| | |_| |_| \__ \      |
#   |      \___/ \_/ \___|_|  \__,_|_|_| |___/\__\__,_|\__|\__,_|___/      |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def inventory_wagner_titanus_racksense_door_status(info):
    return [ (None, None) ]

def check_wagner_titanus_racksense_door_status(item, _no_params, info):
    parsed = parse_wagner_titanus_topsens(info)
    door_status = parsed[2][0][8]
    status = 3
    if door_status == "0":
        message = "Door closed"
        status = 0
    else:
        message = "Door open"
        status = 2
    return status, message

check_info["wagner_titanus_racksense.door_status"] = {
    "check_function"        : check_wagner_titanus_racksense_door_status,
    "inventory_function"    : inventory_wagner_titanus_racksense_door_status,
    "service_description"   : "Door Status",
    "snmp_info"             : wagner_titanus_racksense_info,
    "snmp_scan_function"    : wagner_titanus_racksense_scan
}

#.
#   .--buzzer status------------------------------------------------------.
#   |                               _ _       _        _                   |
#   |       _____   _____ _ __ __ _| | |  ___| |_ __ _| |_ _   _ ___       |
#   |      / _ \ \ / / _ \ '__/ _` | | | / __| __/ _` | __| | | / __|      |
#   |     | (_) \ V /  __/ | | (_| | | | \__ \ || (_| | |_| |_| \__ \      |
#   |      \___/ \_/ \___|_|  \__,_|_|_| |___/\__\__,_|\__|\__,_|___/      |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def inventory_wagner_titanus_racksense_buzzer_status(info):
    return [ (None, None) ]

def check_wagner_titanus_racksense_buzzer_status(item, _no_params, info):
    parsed = parse_wagner_titanus_topsens(info)
    buzzer_status = parsed[2][0][9]
    status = 3
    if buzzer_status == "0":
        message = "Buzzer disabled"
        status = 2
    else:
        message = "Buzzer enabled"
        status = 0
    return status, message

check_info["wagner_titanus_racksense.buzzer_status"] = {
    "check_function"        : check_wagner_titanus_racksense_buzzer_status,
    "inventory_function"    : inventory_wagner_titanus_racksense_buzzer_status,
    "service_description"   : "Buzzer Status",
    "snmp_info"             : wagner_titanus_racksense_info,
    "snmp_scan_function"    : wagner_titanus_racksense_scan
}

#.
#   .--service or blocked status------------------------------------------------------.
#   |                               _ _       _        _                   |
#   |       _____   _____ _ __ __ _| | |  ___| |_ __ _| |_ _   _ ___       |
#   |      / _ \ \ / / _ \ '__/ _` | | | / __| __/ _` | __| | | / __|      |
#   |     | (_) \ V /  __/ | | (_| | | | \__ \ || (_| | |_| |_| \__ \      |
#   |      \___/ \_/ \___|_|  \__,_|_|_| |___/\__\__,_|\__|\__,_|___/      |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def inventory_wagner_titanus_racksense_serviceorblocked_status(info):
    return [ (None, None) ]

def check_wagner_titanus_racksense_serviceorblocked_status(item, _no_params, info):
    parsed = parse_wagner_titanus_topsens(info)
    serviceorblocked_status = parsed[2][0][10]
    status = 3
    if serviceorblocked_status == "0":
        message = "RAS operational"
        status = 0
    else:
        message = "RAS is in blocked state - Key in the wrong position?"
        status = 2
    return status, message

check_info["wagner_titanus_racksense.serviceorblocked_status"] = {
    "check_function"        : check_wagner_titanus_racksense_serviceorblocked_status,
    "inventory_function"    : inventory_wagner_titanus_racksense_serviceorblocked_status,
    "service_description"   : "RAS Status",
    "snmp_info"             : wagner_titanus_racksense_info,
    "snmp_scan_function"    : wagner_titanus_racksense_scan
}
