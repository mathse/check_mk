#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
""" disks status in a DDN-Storage
By Mathias Decker
contact: mathias.decker@mdc-berlin.de
         github@mathiasdecker.de
         
         This program is free software: you can redistribute it and/or modify
         it under the terms of the GNU General Public License as published by
         the Free Software Foundation, either version 3 of the License, or
         (at your option) any later version.
         
         This program is distributed in the hope that it will be useful,
         but WITHOUT ANY WARRANTY; without even the implied warranty of
         MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
         GNU General Public License for more details.
         
         You should have received a copy of the GNU General Public License
         along with this program.  If not, see <http://www.gnu.org/licenses/>.
         """

def inventory_ddn_disks(info):
    return [ ("%s:%s" % (x[4], x[5]) , None) for x in info ]

def check_ddn_disks(item, _no_params, info):

    pdisk_state = {
         1  : 'Normal',
         2  : 'Failed',
         3  : 'Predictive failure',
         4  : 'Unknown',
    }

    for index, poolid, diskid, diskwwn, diskenc, diskslot, dstate  in info:
        ditem = "%s:%s" % ( diskenc, diskslot )
        if ditem == item:
            state = 0
            dstate = saveint(dstate)
            msg = ["Disk: %s (Enclosure: %s, Slot: %s)" % ( diskwwn, diskenc, diskslot ) ]
            label = ""
            if dstate in [ 3 ]:
                state = 1
                label = "(!)"
            elif dstate in [ 2 ]:
                state = 2
                label = "(!!)"
            msg.append("state %s%s" % ( pdisk_state.get(dstate, 'ukn (%s)' % dstate ), label ))

            return state, ", ".join(msg)
    return 3, "Device not found in SNMP tree"

check_info["ddn_disks"] = {
    "check_function"        : check_ddn_disks,
    "inventory_function"    : inventory_ddn_disks,
    "service_description"   : "Physical Disk %s",
    "has_perfdata"          : False,
    "snmp_scan_function"    : lambda oid: oid('.1.3.6.1.2.1.1.2.0').startswith('.1.3.6.1.4.1.8072'),
    "snmp_info"             : ( ".1.3.6.1.4.1.6894.2.9.1", [
                                            1, # physDiskIndex
                                            2, # physDiskPoolId
                                            3, # physDiskId
                                            4, # physDiskWWN
                                            5, # physDiskEnc
                                            6, # physDiskSlot
                                            7, # physDiskState
                              ]),
}

